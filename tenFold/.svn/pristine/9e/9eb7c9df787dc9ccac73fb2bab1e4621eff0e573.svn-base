using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using PokeEngine.Map;
using PokeEngine.Input;
using PokeEngine.Menu;
using PC = PokeEngine.Trainers;
using System.Threading.Tasks;
using LuaInterface;
using PokeEngine.Trainers;
using PokeEngine.Pokemon;
using PokeEngine.Moves;
using PokeEngine.Tools;

namespace PokeEngine.Screens
{
    static class GameScreen
    {

        public enum ActiveMenu { Menu, PokeDex, Trainer, Pokemon, Save, Bag, Options, None }

        public static bool isActive = false;
        public static bool isVisible = false;
        public static GraphicsDeviceManager graphics;
        public static SpriteBatch spriteBatch;
        public static ContentManager content;
        public static NPC ActiveNPC;
        private static int previousTime;
        private static Lua lua;

        //TEST MAP
        public static Zone map
        {
            get { return world.currentArea; }
        }
        public static World world = new World();
        //TEST PLAYER
        public static PC.Player player;

        static public void Initialize(GraphicsDeviceManager g, SpriteBatch s, ContentManager c, SpriteFont f)
        {
            graphics = g;
            spriteBatch = s;
            content = c;
            //initialize GameDraw
            GameDraw.initialize(g, s, c, f, world);
            GameDraw.drawAdjObjects = true;
            KeyBind.Initialize();
            TFSH.PokeEngineScriptHelper.Initialize(world);
            lua = new Lua();

            previousTime = 0;
            
            //MAKE TEST MAP
            world.getBounds();
            world.changeZone("test");
            world.currentArea.tile[4, 4].Z = 30;
            world.currentArea.tile[4, 5].Z = 45;
            //GameDraw.makeGroundBuffers(map);
            GameDraw.makeAdjBuffers(world);
            GameDraw.updateNPCSpritesheets(world);
            //MAKE PLAYER            
            player = new PC.Player();
            player.name = "EncyKal";
            player.spriteSheet = "overworld.png";
            player.tileCoords = new Point(4, 4);
            loadPlayerTextureSheet();
            //TFSH.PokeEngineScriptHelper.setMap("test", 6, 6);
            for (int i = 0; i < player.IdentifiedPokemon.Length; i++)
                if (i % 3 != 0)
                    player.IdentifiedPokemon[i] = true;
            //world.currentArea.tile[6, 6].setOccupied(true);

            ActiveNPC = null;

            /*
            //add a test npc
            NPC testNPC = new NPC();
            testNPC.tileCoords = new Point(1, 1);
            //testNPC.SetWanderArea(new Rectangle(0,0, 5, 5));
            testNPC.AddAction(PC.Action.RIGHT);
            testNPC.AddAction(PC.Action.DOWN);
            testNPC.AddAction(PC.Action.LEFT);
            testNPC.AddAction(PC.Action.UP);
            testNPC.AddAction(PC.Action.FACELEFT);
            testNPC.AddAction(PC.Action.PAUSE);
            testNPC.AddAction(PC.Action.PAUSE);
            testNPC.AddAction(PC.Action.PAUSE);
            testNPC.AddAction(PC.Action.FACEDOWN);
            testNPC.AddAction(PC.Action.PAUSE);
            testNPC.AddAction(PC.Action.PAUSE);
            testNPC.AddAction(PC.Action.PAUSE);
            testNPC.AddAction(PC.Action.STOP);
            testNPC.spriteSheet = @"Aide M formatted.png";
            testNPC.interactScript = "ShowMessage(\"Ever get the feeling that your life is just one big repeating pattern?\")\nShowMessage(\"cause I know I do\")";
            map.trainerList.Add(testNPC);
            */

            CutSceneScreen.Initialize(g, s, c, f, world, player);
            CinematicScreen.Initialize(g, s, c, f);
            GameDraw.updateNPCSpritesheets(world);

            
        }

        static public void StartNewGame()
        {
            //we want to load in the game initialization settings
        }

        private static void loadPlayerTextureSheet()
        {
            player.textureSheet = SaveLoad.LoadTexture2D(@"Content\Sprites\Player\" + player.spriteSheet, graphics.GraphicsDevice);

            //Now we want to apply transparency
            //first get the raw data from the image
            Color[] gottenColour = new Color[player.textureSheet.Width * player.textureSheet.Height];
            player.textureSheet.GetData<Color>(gottenColour);
            //sample the pixel at 5,5 to get the transparent colour to use
            Color sample = new Color(gottenColour[player.textureSheet.Width * 5 + 5].R,
                                    gottenColour[player.textureSheet.Width * 5 + 5].G,
                                    gottenColour[player.textureSheet.Width * 5 + 5].B,
                                    gottenColour[player.textureSheet.Width * 5 + 5].A);
            for (int i = 0; i < player.textureSheet.Width * player.textureSheet.Height - 1; i++)
            {
                if (gottenColour[i].R == sample.R &&
                    gottenColour[i].G == sample.G &&
                    gottenColour[i].B == sample.B)
                {
                    gottenColour[i].R = gottenColour[i].G = gottenColour[i].B = gottenColour[i].A = 0;
                }
            }
            //get rid of black edges around sprite
            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 4; y++)
                {
                    int i = 0;
                    //top
                    for (i = 0; i < 34; i++)
                        gottenColour[(y * 5 + y * 32 + 4) * player.textureSheet.Width + (x * 5 + x * 32 + 4) + i] = new Color(0f, 0f, 0f, 0f);
                    //bottom
                    for (i = 0; i < 34; i++)
                        gottenColour[(y * 5 + (y + 1) * 32 + 5) * player.textureSheet.Width + (x * 5 + x * 32 + 4) + i] = new Color(0f, 0f, 0f, 0f);
                    //left
                    for (i = 0; i < 34; i++)
                        gottenColour[(y * 5 + y * 32 + 4 + i) * player.textureSheet.Width + (x * 5 + x * 32 + 4)] = new Color(0f, 0f, 0f, 0f);
                    //right
                    for (i = 0; i < 34; i++)
                        gottenColour[(y * 5 + y * 32 + 4 + i) * player.textureSheet.Width + (x * 5 + (x + 1) * 32 + 5)] = new Color(0f, 0f, 0f, 0f);
                }
            }
            player.textureSheet.SetData<Color>(gottenColour);
        }

        static public void LoadContent()
        {

        }

        /// <summary>
        /// This method is called once per frame (60fps is desired) to update logic.
        /// </summary>
        static public void Update(GameTime gameTime)
        {
            if (!DialogBox.isVisible && !lua.IsExecuting) //block updates while the dialog box is visible
            {
                if (PokedexScreen.IsActive)
                    PokedexScreen.Update();
                else
                {
                    updatePlayer(gameTime);
                    updateNPCs(gameTime);
                }
            }

            previousTime = gameTime.TotalGameTime.Seconds;
        }

        public static void updatePlayer(GameTime gameTime)
        {
            //if player is moving update their position
            
            if (player.isMoving)
            {
                player.movementIndex++;
                if (player.movementIndex >= player.speed)
                {
                    player.movementIndex = 0;
                    player.isMoving = false;
                    player.tileCoords = player.nextTile;
                    player.currentZ = map.tile[player.tileCoords.X, player.tileCoords.Y].Z;
                    //run the event on the tile, if any
                    runEvent(map.tile[player.nextTile.X, player.nextTile.Y].eventScript);
                }
            }

            player.Update();
        }

        static private void updateNPCs(GameTime gameTime)
        {
            foreach (NPC npc in map.trainerList)
            {
                if (!npc.isMoving)
                {
                    //do wander/routine/no movement, it happens every 'speed' steps
                    npc.GetNextMove(map);
                }

                if (npc.isMoving)
                {
                    //increase the movment index, this is essentially the ratio of how far we are between one tile and another
                    npc.movementIndex++;
                    if (npc.movementIndex >= npc.speed)
                    {
                        //when we reach the max we reset
                        npc.movementIndex = 0;
                        npc.isMoving = false;
                        npc.tileCoords = npc.nextTile;
                        npc.currentZ = map.tile[npc.tileCoords.X, npc.tileCoords.Y].Z;
                    }
                }
                //basic update
                npc.Update();

            }
        }

        /// <summary>
        /// This method is called once per frame (60fps is desired) to draw.
        /// </summary>
        static public void Draw()
        {
            
            if (isVisible)
            {
                if (PokedexScreen.IsVisible)
                    PokedexScreen.Draw();
                else
                {
                    //updateSpriteLocation(player);
                    //graphics.GraphicsDevice.Clear(Color.CornflowerBlue);
                    //GameDraw.drawGround(map, player);                
                    GameDraw.drawAdjacentGround(world, player);
                    GameDraw.drawScenery(world);
                    GameDraw.drawPlayer(player, player.spritePosition, new Rectangle(0, 0, 116, 153));
                    GameDraw.drawNPCs(world);
                }
            }
        }

        static private void updateSpriteLocation(PC.NPC inNPC)
        {
            
            Rectangle rect;
            switch (inNPC.facing)
            {
                case PC.FacingDirection.North:
                    rect = new Rectangle(5, 5, 32, 32);
                    break;
                case PC.FacingDirection.East:
                    rect = new Rectangle(5, 116, 32, 32);
                    break;
                case PC.FacingDirection.South:
                    rect = new Rectangle(5, 42, 32, 32);
                    break;
                case PC.FacingDirection.West:
                    rect = new Rectangle(5, 79, 32, 32);
                    break;
                default:
                    rect = new Rectangle(5, 116, 32, 32);
                    break;
            }
            inNPC.spritePosition = rect;
            
        }

        /// <summary>
        /// Handle the inputs
        /// </summary>
        public static void handleKeys()
        {
            if (!player.isMoving && isActive && !lua.IsExecuting)
            {
                //DEBUG BATTLE ENGINE TESTING
                if (Input.InputHandler.isKeyPress(Keys.B))
                {
                    //testing battle engine here
                    /////////////////////////////
                    startBattle();
                    /////////////////////////////
                }
                //DEBUG BCUT SCENE TESTING
                if (Input.InputHandler.isKeyPress(Keys.C))
                {
                    //testing cut scenes here
                    /////////////////////////////
                    StartCutScene();
                    /////////////////////////////
                }
                //DEBUG BCUT SCENE TESTING
                if (Input.InputHandler.isKeyPress(Keys.M))
                {
                    //testing cut scenes here
                    /////////////////////////////
                    StartCinematic();
                    /////////////////////////////
                }

                if (Keyboard.GetState().IsKeyDown(KeyBind.KeyList.OVERWORLD_LEFT))
                    player.tryToMove("Left");
                else if (Keyboard.GetState().IsKeyDown(KeyBind.KeyList.OVERWORLD_RIGHT))
                    player.tryToMove("Right");
                else if (Keyboard.GetState().IsKeyDown(KeyBind.KeyList.OVERWORLD_UP))
                    player.tryToMove("Up");
                else if (Keyboard.GetState().IsKeyDown(KeyBind.KeyList.OVERWORLD_DOWN))
                    player.tryToMove("Down");

                //if the action key is pressed while on the game world
                if (Input.InputHandler.isKeyPress(KeyBind.KeyList.OVERWORLD_ACTION))
                {
                    switch (player.facing)
                    {
                        case PC.FacingDirection.East:
                            interactWithTile(player.tileCoords.X + 1, player.tileCoords.Y);
                            interectWithNPC(player.tileCoords.X + 1, player.tileCoords.Y);
                            break;
                        case PC.FacingDirection.West:
                            interactWithTile(player.tileCoords.X - 1, player.tileCoords.Y);
                            interectWithNPC(player.tileCoords.X - 1, player.tileCoords.Y);
                            break;
                        case PC.FacingDirection.North:
                            interactWithTile(player.tileCoords.X, player.tileCoords.Y - 1);
                            interectWithNPC(player.tileCoords.X, player.tileCoords.Y - 1);
                            break;
                        case PC.FacingDirection.South:
                            interactWithTile(player.tileCoords.X, player.tileCoords.Y + 1);
                            interectWithNPC(player.tileCoords.X, player.tileCoords.Y + 1);
                            break;
                    }
                }
                //more key handles here

                if (Input.InputHandler.isKeyPress(KeyBind.KeyList.OVERWORLD_MENU))
                {
                    isActive = false;
                    MenuScreen.isActive = true;
                    MenuScreen.isVisible = true;
                }

                if (Mouse.GetState().LeftButton == ButtonState.Pressed) //zoom in
                    GameDraw.cameraOffset -= new Vector3(0, 20, 10);
                if (Mouse.GetState().RightButton == ButtonState.Pressed) //zoom out
                    GameDraw.cameraOffset += new Vector3(0, 20, 10);
                if (Mouse.GetState().MiddleButton == ButtonState.Pressed) //reset camera
                    GameDraw.cameraOffset = new Vector3(0.0f, 1000.0f, 800.0f);

            }            
        }

        /// <summary>
        /// Runs the interact script for the object which is in the given tile
        /// </summary>
        /// <param name="x">x coord</param>
        /// <param name="y">y coord</param>
        private static void interactWithTile(int x, int y)
        {

            //if it's in the map's boundaries
            if ((x >= 0 && y >= 0) && (x < map.mapWidth && y < map.mapHeight))
            {
                //make sure there IS a scenery object to interact with
                if (map.tile[x, y].sceneryObject != null)
                {
                    Task.Factory.StartNew(() => DoLuaScript(map.tile[x, y].sceneryObject.interactScript)); //threading because I am too lazy to queue everything
                }
            }
        }

        /// <summary>
        /// Runs the NPC's script with the given tile
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        private static void interectWithNPC(int x, int y)
        {
            int iX = Convert.ToInt32(x);
            int iY = Convert.ToInt32(y);

            //if it's in the map's boundaries
            if ((iX >= 0 && iY >= 0) && (iX < map.mapWidth && iY < map.mapHeight))
            {
                ActiveNPC = map.GetNPCAtLocation(x, y);
                //make sure there IS an NPC to interact with
                if (ActiveNPC != null)
                {
                    if (!ActiveNPC.isMoving)
                    {
                        //stop and turn to face the player
                        if (player.facing == FacingDirection.North)
                            ActiveNPC.facing = FacingDirection.South;
                        else if (player.facing == FacingDirection.South)
                            ActiveNPC.facing = FacingDirection.North;
                        else if (player.facing == FacingDirection.East)
                            ActiveNPC.facing = FacingDirection.West;
                        else if (player.facing == FacingDirection.West)
                            ActiveNPC.facing = FacingDirection.East;

                        Task.Factory.StartNew(() => DoLuaScript(map.GetNPCAtLocation(x, y).interactScript)); //threading because I am too lazy to queue everything
                    }
                }
            }
        }

        private static void DoLuaScript(string s)
        {
            lua = new Lua();
            //put in the persistant variables
            TFSH.ScriptVariables.PutVariables(lua);
            LuaRegistrationHelper.TaggedStaticMethods(lua, typeof(TFSH.PokeEngineScriptHelper));
            lua.DoString(s);
            //store any changes to the persistant variables
            TFSH.ScriptVariables.TakeVariables(lua);
        }
        
        /// <summary>
        /// Runs an event on a tile
        /// </summary>
        /// <param name="script">script to run</param>
        private static void runEvent(String script)
        {
            if (script != null)
            {
                if (script != "")
                {
                    Task.Factory.StartNew(() => DoLuaScript(script)); //threading because I am too lazy to queue everything
                }
            }
        }

        /// <summary>
        /// Runs the zone script, called when changing zones
        /// </summary>
        /// <param name="script"></param>
        internal static void RunZoneScript(String script)
        {
            if (isActive)
            {
                if (!String.IsNullOrWhiteSpace(script))
                {
                    Task.Factory.StartNew(() => DoLuaScript(script)); //threading because I am too lazy to queue everything
                }
            }
        }

        /// <summary>
        /// Testing battle engine
        /// </summary>
        private static void startBattle()
        {
            Trainer trainer = new Trainer();

            //BaseStatsList.initialize();

            BaseMove tackle = new BaseMove("Tackle", "hits the opponent hard", 50, 100, "Normal", "Physical", 35);
            tackle.moveScript = @"  if user:hits(move, target) then
                                        user:doDamageTo(move, target)
                                    end
                                ";
            BaseMove watergun = new BaseMove("Bubble", "waters the opponent", 20, 100, "Water", "Special", 30);
            watergun.moveScript = @"  if user:hits(move, target) then
                                        ShowOption('testing', {'a', 'b', 'c'})
                                    end
                                ";
            BaseMove ember = new BaseMove("Ember", "fires the opponent", 40, 100, "Fire", "Special", 25);
            ember.moveScript = @"  if user:hits(move, target) then
                                        user:doDamageTo(move, target)
                                    end
                                ";
            ActivePokemon charmander = new ActivePokemon(BaseStatsList.basestats);
            ActivePokemon squirtle = new ActivePokemon(BaseStatsList.basestats);
            charmander.baseStat = BaseStatsList.GetBaseStats("Charmander");
            charmander.level = 20;
            charmander.currentHP = charmander.HP;
            charmander.setNickname("Charmander");
            charmander.addExp(charmander.expAtLevel(charmander.level) - 1);
            squirtle.baseStat = BaseStatsList.GetBaseStats("Squirtle");
            squirtle.level = 20;
            squirtle.currentHP = squirtle.HP;
            squirtle.setNickname("Squirtle");
            squirtle.addExp(squirtle.expAtLevel(squirtle.level) - 1);


            charmander.move[0] = new ActiveMove(tackle);
            charmander.move[1] = new ActiveMove(ember);
            squirtle.move[0] = new ActiveMove(tackle);
            squirtle.move[1] = new ActiveMove(watergun);

            GameScreen.player.addPokemon(squirtle);
            trainer.addPokemon(charmander);

            BattleScreen.startSingleBattle(GameScreen.player, trainer);
            ScreenHandler.activeScreen = ScreenHandler.ActiveScreen.Battle;
        }

        private static void StartCutScene()
        {
            CutScene scene = new CutScene();
            scene.length = -1;
            scene.name = "Test Scene";

            scene.playerActions.Add(PC.Action.LEFT);
            scene.playerActions.Add(PC.Action.RIGHT);
            scene.playerActions.Add(PC.Action.LEFT);
            scene.playerActions.Add(PC.Action.RIGHT);
            scene.playerActions.Add(PC.Action.LEFT);
            scene.playerActions.Add(PC.Action.RIGHT);
            scene.playerActions.Add(PC.Action.LEFT);
            scene.playerActions.Add(PC.Action.RIGHT);
            scene.playerActions.Add(PC.Action.LEFT);
            scene.playerActions.Add(PC.Action.RIGHT);
            scene.playerActions.Add(PC.Action.LEFT);
            scene.playerActions.Add(PC.Action.RIGHT);
            scene.playerActions.Add(PC.Action.LEFT);
            scene.playerActions.Add(PC.Action.RIGHT);
            scene.playerActions.Add(PC.Action.LEFT);
            scene.playerActions.Add(PC.Action.RIGHT);
            scene.playerActions.Add(PC.Action.LEFT);
            scene.playerActions.Add(PC.Action.RIGHT);
            scene.playerActions.Add(PC.Action.STOP);

            //set up some actions
            for (int i = 0; i < 11; i++)
            {
                map.trainerList[0].AddAction(PC.Action.LEFT);
                map.trainerList[1].AddAction(PC.Action.RIGHT);
            }
            map.trainerList[0].AddAction(PC.Action.FACEUP);
            map.trainerList[0].AddAction(PC.Action.FACERIGHT);
            map.trainerList[0].AddAction(PC.Action.FACEDOWN);
            map.trainerList[0].AddAction(PC.Action.FACELEFT);
            map.trainerList[1].AddAction(PC.Action.FACEUP);
            map.trainerList[1].AddAction(PC.Action.FACERIGHT);
            map.trainerList[1].AddAction(PC.Action.FACEDOWN);
            map.trainerList[1].AddAction(PC.Action.FACELEFT);
            for (int i = 0; i < 3; i++)
            {
                map.trainerList[0].AddAction(PC.Action.DOWN);
                map.trainerList[1].AddAction(PC.Action.UP);
            }
            map.trainerList[0].AddAction(PC.Action.FACEUP);
            map.trainerList[0].AddAction(PC.Action.FACERIGHT);
            map.trainerList[0].AddAction(PC.Action.FACEDOWN);
            map.trainerList[0].AddAction(PC.Action.FACELEFT);
            map.trainerList[1].AddAction(PC.Action.FACEUP);
            map.trainerList[1].AddAction(PC.Action.FACERIGHT);
            map.trainerList[1].AddAction(PC.Action.FACEDOWN);
            map.trainerList[1].AddAction(PC.Action.FACELEFT);
            for (int i = 0; i < 11; i++)
            {
                map.trainerList[0].AddAction(PC.Action.RIGHT);
                map.trainerList[1].AddAction(PC.Action.LEFT);
            }
            map.trainerList[0].AddAction(PC.Action.FACEUP);
            map.trainerList[0].AddAction(PC.Action.FACERIGHT);
            map.trainerList[0].AddAction(PC.Action.FACEDOWN);
            map.trainerList[0].AddAction(PC.Action.FACELEFT);
            map.trainerList[1].AddAction(PC.Action.FACEUP);
            map.trainerList[1].AddAction(PC.Action.FACERIGHT);
            map.trainerList[1].AddAction(PC.Action.FACEDOWN);
            map.trainerList[1].AddAction(PC.Action.FACELEFT);
            for (int i = 0; i < 3; i++)
            {
                map.trainerList[0].AddAction(PC.Action.UP);
                map.trainerList[1].AddAction(PC.Action.DOWN);
            }
            map.trainerList[0].AddAction(PC.Action.FACEUP);
            map.trainerList[0].AddAction(PC.Action.FACERIGHT);
            map.trainerList[0].AddAction(PC.Action.FACEDOWN);
            map.trainerList[0].AddAction(PC.Action.FACELEFT);
            map.trainerList[1].AddAction(PC.Action.FACEUP);
            map.trainerList[1].AddAction(PC.Action.FACERIGHT);
            map.trainerList[1].AddAction(PC.Action.FACEDOWN);
            map.trainerList[1].AddAction(PC.Action.FACELEFT);

            map.trainerList[0].AddAction(PC.Action.STOP);
            map.trainerList[1].AddAction(PC.Action.STOP);

            scene.NPCs = map.trainerList;

            Trainer temp = new Trainer(player);

            //start up the cutscene
            List<TimedCommand> commands = new List<TimedCommand>();
            commands.Add(new TimedCommand(10*map.trainerList[0].speed, "ShowMessage(\"TESTING\")"));
            commands.Add(new TimedCommand(45 * map.trainerList[0].speed, "EndCutScene()"));
            commands.Add(new TimedCommand(0, "WaitTill(\"Lady\", 150)"));
            commands.Add(new TimedCommand(140, "WaitTill(\"Boy\", 20)"));

            scene.commands = commands;
            CutSceneScreen.NewCutScene(scene);
            isActive = false;
            isVisible = false;
        }

        private static void StartCinematic()
        {
            List<CinematicAction> actions = new List<CinematicAction>();

            actions.Add(new CinematicAction(new Vector2(100, 256),
                                            new Vector2(300, 256),
                                            1f, 1.1f,
                                            600,
                                            null,
                                            "2j11yjd.jpg",
                                            false, true));
            actions.Add(new CinematicAction(new Vector2(20, 20),
                                            new Vector2(50, 400),
                                            2f, 1f,
                                            400,
                                            null,
                                            "281.jpg",
                                            false, true));
            actions.Add(new CinematicAction(new Vector2(50, 400),
                                            new Vector2(100, 400),
                                            1f, 1.5f,
                                            200,
                                            "test message",
                                            "281.jpg",
                                            true, true));

            CinematicScreen.NewCinematic(actions);
        }
    }
}
