using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using PokeEngine.Screens;
using System.Threading;

namespace PokeEngine.Menu
{
    public class DialogBox : Window
    {
        GraphicsDeviceManager graphics;
        ContentManager content;
        
        String lineOne = ""; //first line to display
        String lineTwo = ""; //second line to display
        String remainingText = ""; //text that can not fit on the two visible lines
        bool isAnimating = false;
        Queue<Message> messageQueue = new Queue<Message>(); //queue for whole messages
        Message currentMessage;
        public  int choice;

         public void Initialize(GraphicsDeviceManager g, SpriteBatch s, ContentManager c, SpriteFont f)
        {
            graphics = g;
            content = c;
            font = f;
        }

        /// <summary>
        /// Shows a message in the dialog box
        /// </summary>
        /// <param name="text">text to show</param>
        private  void showDialog(Message msg)
        {
            currentMessage = msg;
            isVisible = true;
            isAnimating = true;
            //clear these variables
            remainingText = "";
            lineOne = "";
            lineTwo = "";
            //split the text into lines that can fit in the box
            //first split the text into a bunch of words
            String[] words = msg.text.Split(' ');
            String buffer = "";
            //add each word to a new string, when that string exceeds a certain length add it to line 1 if not null, else line 2 if not null, else remaining text
            foreach( String word in words)
            {
                //if the current word is not empty or null
                if (word != null && word != "")
                {
                    //then if the width of the buffer plus the new word exceedes the desired width
                    if (font.MeasureString(buffer + " " + word).X > 560)
                    {
                        //add the buffer to the correct location then clear the buffer
                        if (lineOne == "" || lineOne == null)
                        {
                            lineOne = buffer;
                            buffer = word;
                        }
                        else if (lineTwo == "" || lineTwo == null)
                        {
                            lineTwo = buffer;
                            buffer = word;
                        }
                        else
                        {
                            remainingText = remainingText + " " + buffer; //yes, += is correct
                            buffer = word;
                        }

                    }
                    //else then add the line to the buffer
                    else
                    {
                        buffer = buffer + " " + word;
                        buffer = buffer.Trim();
                    }
                }                           
            }
            //if the buffer is not empty then add it to the highest priority clear String
            if (lineOne == "" || lineOne == null)
            {
                lineOne = buffer;
                buffer = "";
            }
            else if (lineTwo == "" || lineTwo == null)
            {
                lineTwo = buffer;
                buffer = "";
            }
            else
            {
                remainingText = remainingText + " " + buffer; //yes, += is correct
                buffer = "";
                remainingText = remainingText.Trim();
            }   
            
        }

        /// <summary>
        /// Add a new message to be displayed
        /// </summary>
        /// <param name="text"></param>
         public void newMessage(Message msg)
        {
            if (DialogBox.isVisible == false)
            {
                showDialog(msg);
            }
            else
            {
                messageQueue.Enqueue(msg);
            }
        }

        public  void newMessage(String msg)
        {
            newMessage(new Message(msg));
        }

        /// <summary>
        /// This method is called once per frame (60fps is desired) to update logic.
        /// </summary>
         public void Update(GameTime gameTime)
        {
            if (isVisible && !OptionBox.isVisible)
            {
                if (remainingText == "" && currentMessage.hasOptions)
                {
                    //show options box
                    OptionBox.newOption(currentMessage.option);
                }
            }
        }

        /// <summary>
        /// This method is called once per frame (60fps is desired) to draw.
        /// </summary>
         public void Draw(SpriteBatch spriteBatch)
        {
            if (isVisible)
            {
                spriteBatch.Draw(ScreenHandler.Textures.DialogueBox, ScreenHandler.Rectangles.DialogueBox, Color.White);
                Vector2 L1 = new Vector2((float)ScreenHandler.Rectangles.DialogueBox.X + 50f, (float)ScreenHandler.Rectangles.DialogueBox.Y + 10f);
                spriteBatch.DrawString(font, lineOne, L1, Color.Blue);
                Vector2 L2 = new Vector2((float)ScreenHandler.Rectangles.DialogueBox.X + 50f, (float)ScreenHandler.Rectangles.DialogueBox.Y + 40f);
                spriteBatch.DrawString(font, lineTwo, L2, Color.Blue);
                //Vector2 L3 = new Vector2((float)ScreenHandler.Rectangles.DialogueBox.X + 50f, (float)ScreenHandler.Rectangles.DialogueBox.Y + 70f);
                //spriteBatch.DrawString(font, "choice is : " + choice, L3, Color.Blue);
            }
            if (OptionBox.isVisible)
            {
                OptionBox.Draw(spriteBatch, choice, font);
            }
        }

        public  void HandleInput()
        {
            if (Input.InputHandler.isKeyPress(Keys.Z))
            {
                if (OptionBox.isVisible)
                {
                    //finalize the choice the user makes
                    OptionBox.isVisible = false;
                    isVisible = false;
                    lock(TFSH.PokeEngineScriptHelper.lockObject)
                    {
                        //send pulse to method to continue execution
                        Monitor.PulseAll(TFSH.PokeEngineScriptHelper.lockObject);
                    }
                }
                else
                {
                    Input.InputHandler.coolDown = Input.InputHandler.coolDownMax;
                    if (remainingText != null && remainingText != "")
                    {
                        currentMessage.text = remainingText;
                        showDialog(currentMessage);
                    }
                    else if (remainingText == "" && currentMessage.hasOptions)
                    {
                        //show options box
                        OptionBox.newOption(currentMessage.option);
                    }
                    else
                    {
                        if (messageQueue.Count > 0)
                        {
                            showDialog(messageQueue.Dequeue());
                        }
                        else
                        {
                            DialogBox.isVisible = false;
                        }
                    }
                }
            }
            //press up to decrease option choice by 1, minimum is zero
            if (Input.InputHandler.isKeyPress(Keys.Up))
            {
                if (OptionBox.isVisible)
                {
                    choice--;
                    if (choice < 0)
                    {
                        choice = 0;
                    }
                    if (choice < OptionBox.topChoice)
                    {
                        OptionBox.topChoice--;
                    }
                    
                }
            }
            //press down to increase option choice by 1, maximum of options.length-1 (cause zero index)
            if (Input.InputHandler.isKeyPress(Keys.Down))
            {
                if (OptionBox.isVisible)
                {
                    choice++;
                    if(choice >= OptionBox.options.Length)
                    {
                        choice = OptionBox.options.Length - 1;
                    }
                    if (choice > OptionBox.topChoice + 3)
                    {
                        OptionBox.topChoice++;
                    }
                }
            }
        }
    }

    /// <summary>
    /// Option box sits over the top of a dialog box
    /// options will appear at the end of the message
    /// </summary>
    public  class OptionBox
    {
         bool isActive;
        public  bool isVisible;
        public  String[] options;
        private  Menu menu;
        public  int topChoice; //the choice that will be at the top of the drawn options when number of options > 4

         Vector2 menuPosition = new Vector2(390, 150);

        public  void newOption(String[] inOptions)
        {
            DialogBox.choice = 0;
            topChoice = 0;
            isVisible = true;
            options = inOptions;
            //size increases to fit a maximum of four options at a time (take the min of 6 and 1.5*number of options)
            menu = new Menu(8, Convert.ToInt32(Math.Min(6, Math.Ceiling(1.5 * options.Length))), menuPosition);
        }

        public  void Draw(SpriteBatch sb, int choice, SpriteFont font)
        {
            //draw up to 4 of the options
            menu.Draw(sb, Color.White);
            //if number of options is 4 or fewer then draw all options
            if (options.Length <= 4)
            {
                for (int i = 0; i < options.Length; i++)
                {
                    if(i != choice)
                        sb.DrawString(font, options[i], new Vector2(menuPosition.X + 25, menuPosition.Y + (i + 1) * 30), Color.Black);
                    else
                        sb.DrawString(font, options[i], new Vector2(menuPosition.X + 25, menuPosition.Y + (i + 1) * 30), Color.White);
                }
            }
            //if number of options is greater than 4 draw four, starting from topChoice
            else
            {
                for (int i = 0; i < 4; i++)
                {
                    if( i + topChoice != choice)
                        sb.DrawString(font, options[topChoice + i], new Vector2(menuPosition.X + 25, menuPosition.Y + (i + 1) * 30), Color.Black);
                    else
                        sb.DrawString(font, options[topChoice + i], new Vector2(menuPosition.X + 25, menuPosition.Y + (i + 1) * 30), Color.White);
                }
            }
        }
    }

    public class Message
    {
        public String text;
        public bool hasOptions;
        public String[] option;

        public Message()
        {
            text = "DEFAULT MESSAGE";
            hasOptions = false;
            option = null;
        }

        public Message(String text)
        {
            this.text = text;
            hasOptions = false;
            this.option = null;
        }

        public Message(String text, String[] options)
        {
            this.text = text;
            this.option = options;
            hasOptions = true;
        }
    }
}
